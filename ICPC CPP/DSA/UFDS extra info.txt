class union_find {
public:
    vector<int> parent;
    vector<int> rank;
    vector<int> size;
    int maxSize;
    int components;
    union_find(int n) : parent(n), rank(n), size(n), components(n - 1), maxSize(1) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int find(int x) {
        if (parent[x] == x) {
            return x;
        }
        parent[x] = find(parent[x]);
        return parent[x];
    }
    
    int getSize(int x) {
        return size[find(x)];
    }

    void join(int x, int y) {
        int px = find(x);
        int py = find(y);
        if (px == py) {
            return;
        }
        if (rank[px] >= rank[py]) {
            size[px] += size[py];
            parent[py] = px;
            maxSize = max(maxSize, size[px]);
        } else {
            size[py] += size[px];
            parent[px] = py;
            maxSize = max(maxSize, size[py]);
        }
        if (rank[px] == rank[py]) {
            rank[px]++;
        }
        components--;
    }
};